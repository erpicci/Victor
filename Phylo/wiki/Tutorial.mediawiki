= Building a phylogenetic tree =
The '''phyltree''' tool allows to build phylogenetic trees. Some optional parameters can be used to tune the process:

 --in <name>     Path to input FASTA file
 --out <name>    Path to output Newick file (default: to screen
 -m <name>       Path to substitution matrix file (default: blosum62.dat)
 -o <double>     Open gap penalty (default: 10.0)
 -e <double>     Extension gap penalty (default: 0.1)
 -d <0|1|2>      Distance matrix builder criterion (default: 0)
                  -d 0: Distance as 1 - percentage of identity
                  -d 1: Use Levenshtein distance
                  -d 2: Use Feng-Doolittle distance
 -c <0|1|2>      Clustering algorithm (default:2)
                  -c 0: UPGMA
                  -c 1: Fitch-Margoliash
                  -c 2: Neighbor Joining
 -v              Verbose (default: no)

The resulting phylogenetic tree is saved in Newick format.

== Example ==
[[File:Phyltree.png|thumb|upright=1.5|right|Output of ''phyltree'', rendered with [http://etetoolkit.org/treeview/ TreeView].]]

The following example is obtained using a library of CYC1 Cytochrome genes from various species simply running the command:

 phyltree --in /home/victor/cyc1_input.fasta -m /home/victor/data/blosum62.dat -d 2
 
 (((sp|Q0JF02|CPS4_ORYSJ:0,(sp|P30183|CCB11_ARATH:0,sp|Q54D07|CY1_DICDI:0):0.528361):1.6686,((sp|P08574|CY1_HUMAN:0,
 (sp|P00125|CY1_BOVIN:0.0429261,sp|Q9D0M3|CY1_MOUSE:0):0.297808):1.55218,(sp|P41179|CCN1_TRYBB:0,(sp|P74917|CY552_ACIFR:0,
 sp|Q9K499|CYC1_STRCO:0):0.732572):1.10758):0.382313):0.0823948,(sp|P00048|CYC_NEUCR:0,((sp|Q6C9Q0|CYC_YARLI:0,
 (sp|Q6Q4H8|CYC_PICPA:0,(sp|Q06374|CG1_COLGL:0,sp|Q6E7D7|CPS4_ORYSI:0.308501):0):0.582973):0.342549,(sp|O13393|CYC_PICST:0,
 (sp|P53698|CYC_CANAL:0,(((sp|P00043|CYC_DEBHA:0.0802929,(sp|O93863|CYC_PACTA:0.0723514,sp|P00041|CYC_ISSOR:0.0505152):0.0294868)
 :0.0185369,(sp|Q753F4|CYC_ASHGO:0.0858857,(sp|P19681|CYC_SCHOC:0.0293847,(sp|P00044|CYC1_YEAST:0.0370127,
 (sp|P25400|CYC_CANGA:0.05915,(sp|P00046|CYC_SCHPO:0.0113562,(sp|Q4HVX7|CYC_GIBZE:0,(sp|P15451|CYC_CHLRE:0,
 sp|Q9AJE4|CYC1_KITGR:0.179574):0.32777):0.166349):0.106052):0.039459):0.0937627):0.0511101):0.00528961)
 :0.0434401):0.0434401):0.104043):0.169192):0.810171):0.217969);

The output Newick string was used as input for the [http://etetoolkit.org/treeview/ TreeView] online tool, producing a visual representation of the tree.

== Extending the code ==
The '''phylo''' API can be used within a C++ project.

<syntaxhighlight line lang="cpp">
  
  #include <phylo.h>
  
  using namespace Victor;
  using namespace Victor::Align2;
  using namespace Victor::Phylo;
  
  int main(int argc, char *argv[]) {
    // Loads an alignment
    ifstream fasta_file("path/to/alignment.fasta");
    Alignment alignment;
    alignment.loadFasta(fasta_file);
    
    
    // Loads a substitution matrix, i.e. BLOSUM62
    ifstream matrix_file("path/to/blosum62.dat");
    SubMatrix substitution_matrix(matrix_file);
    
    
    // Prepares a gap function
    AGPFunction gap_function(10.0, 0.1);
    
    // Distance metrics, i.e. percent identity
    IdentityPercentage build_matrix(substitution_matrix, gap_function);
    
    
    // Custering algorithm, i.e. neighbor joining
    NJ build_tree;
    
    
    // Computes distance matrix and phylogenetic tree
    DistanceMatrix d = build_matrix(alignment);
    RootedTree tree  = build_tree(d).asRootedTree();
    
    
    // Saves the result
    ofstream newick_file("path/to/output.newick");
    tree.saveNewick(newick_file);
    
    return 0;
  }
</syntaxhighlight>

Please refer to the [http://protein.bio.unipd.it/victor_doxygen/index.html Doxygen documentation] for more detailed information.

= Building a multiple sequence alignment - Feng-Doolittle =
The '''fengdoolittle''' algorithm is one of the oldest and most mature methods to produce a multiple sequence alignment from a library of sequences. There are very vew tunable parameters, hence it is the easiest tool for this purpose:

 --in <name>     Name of input FASTA file
 --out <name>    Name of output alignment file (default: to screen)
 -o <double>     Open gap penalty (default: 10.0)
 -e <double>     Extension gap penalty (default: 0.1)
 -v              Verbose (default: no)



= Building a multiple sequence alignment - ClustalW =
The '''clustalw''' tool can be used to generate a multiple alignment from a set of sequence. Like the ''phyltree'' program, many options are available to the user:

 --in <name>   	 Path to input FASTA file
 --out <name>    Path to output ClustalW file (default: to screen)
 -m <name>       Path to substitution matrix file (default: blosum62.dat)
 -o <double>     Open gap penalty (default: 10.0)
 -e <double>     Extension gap penalty (default: 0.1)
 -d <0|1|2>      Distance matrix builder criterion (default: 0)
                  -d 0: Distance as 1 - percentage of identity
                  -d 1: Use Levenshtein distance
                  -d 2: Use Feng-Doolittle distance
 -c <0|1|2>      Clustering algorithm (default:2)
                  -c 0: UPGMA
                  -c 1: Fitch-Margoliash
                  -c 2: Neighbor Joining
 -n <0|1>        Substitution matrix family for multiple alignment (default: 1)
                  -w 0: PAM series
                  -w 1: BLOSUM series
 -wo <double>    Initial open gap penalty for ClustalW (default: 10.0)
 -we <double>    Initial extension gap penalty for ClustalW (default: 0.2)
 -v              Verbose (default: no)

The resulting multiple alignment is saved in clustal format.



== Example ==

The following example is obtained using a library of CYC1 Cytochrome genes from various species simply running the command:

 clustalw --in /home/victor/cyc1_input.fasta --out /home/victor/output.aln -m /home/victor/data/blosum62.dat -d 2

The output clustal string was used as input for the [http://www.jalview.org/ Jalview] tool, producing a visual representation of the alignment, along with its consensus sequence and quality.

[[File:Msa.png|thumb|upright=2.5|center|Output of ''clustalw'', rendered with [http://www.jalview.org/ Jalview].]]

== Extending the code ==
The '''phylo''' API can be used within a C++ project.

<syntaxhighlight line lang="cpp">
  
  #include <phylo.h>
  
  using namespace Victor;
  using namespace Victor::Align2;
  using namespace Victor::Phylo;
  
  int main(int argc, char *argv[]) {
    // Loads alignment and prepares stuffs
    ...
    LevenshteinDistance levenshtein_distance;
    UPGMA upgma;
    
    
    // Computes multiple alignment
    MultipleAlignment MSA = ClustalW(levenshtein_distance, upgma, ClustalW::BLOSUM);
    
    
    // Saves the result
    ofstream msa_file("path/to/output.clustalw");
    MSA.saveClustalW(newick_file);
    
    return 0;
  }
</syntaxhighlight>

Please refer to the [http://protein.bio.unipd.it/victor_doxygen/index.html Doxygen documentation] for more detailed information.
